---
import Section from "../../components/Section.astro";
import Card from "../../components/Card.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";
import Heading from "../../components/Heading.astro";
import { AppConfig } from "../../utils/AppConfig";
import type { MarkdownInstance } from "astro";

export async function getStaticPaths(): Promise<any> {
  const postImporters = import.meta.glob("../posts/*.md");
  const postModules = await Promise.all(
    Object.values(postImporters).map((load) => load()),
  );

  const allPosts = postModules as MarkdownInstance<Record<string, any>>[];

  const allTags: Set<string> = new Set(
    allPosts.map((post) => post.frontmatter.tags).flat(),
  );

  return [...allTags].map((tag) => ({
    params: { tag },
    props: {
      posts: allPosts.filter((post) => post.frontmatter.tags.includes(tag)),
    },
  }));
}

interface Props {
  posts: MarkdownInstance<Record<string, any>>[];
}

const { tag } = Astro.params;
const title = AppConfig.title;
const description = AppConfig.description;

const { posts } = Astro.props;
---

<BaseLayout head={{ title, description }}>
  <Section>
    <Heading title={`Posts with #${tag}`} />
  </Section>
  <Section>
    {
      posts
        .filter((post) => post.frontmatter.tags?.includes(tag))
        .map((post) => (
          <div class="mb-4 basis-1 last:mb-0">
            <Card post={post} />
          </div>
        ))
    }
  </Section>
</BaseLayout>
